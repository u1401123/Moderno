//Анимация
@mixin anim($time, $delay) {
  -webkit-transition: all $time ease $delay;
  -moz-transition   : all $time ease $delay;
  -ms-transition    : all $time ease $delay;
  -o-transition     : all $time ease $delay;
  transition        : all $time ease $delay;
}

@mixin scale($num) {
  -moz-transform   : scale($num);
  -ms-transform    : scale($num);
  -webkit-transform: scale($num);
  -o-transform     : scale($num);
  transform        : scale($num);
}

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flexboxinline() {
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flex;
  display: -o-inline-flex;
  display: inline-flex;
}

@mixin adaptiveimg() {
  width     : 100%;
  height    : 100%;
  position  : absolute;
  top       : 0;
  left      : 0;
  object-fit: cover;
}

@mixin fullscreen() {
  width   : 100%;
  height  : 100%;
  position: absolute;
  top     : 0;
  left    : 0;
}

//смещение элемента в трех координатах
@mixin tr($x, $y, $z) {
  transform: translate3d($x, $y, $z);
}

@mixin flexorder($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group   : $val;
  -ms-flex-order           : $val;
  -webkit-order            : $val;
  order                    : $val;
}

@mixin rotate($deg) {
  -moz-transform   : rotate($deg);
  -ms-transform    : rotate($deg);
  -webkit-transform: rotate($deg);
  -o-transform     : rotate($deg);
  transform        : rotate($deg);
}

@mixin skew($num) {
  -webkit-transform: skewX($num);
  -moz-transform   : skewX($num);
  -ms-transform    : skewX($num);
  -o-transform     : skewX($num);
  transform        : skewX($num);
}

@mixin cnt($h) {
  display        : flex;
  flex-direction : column;
  height         : $h;
  text-align     : center;
  align-items    : stretch;
  justify-content: center;
}

//Адаптивное свойство
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;

  @if $type==1 {
    //Только если меньше контейнера
    #{$property}: $startSize + px;

    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }

  @else if $type==2 {
    //Только если больше контейнера
    #{$property}: $startSize + px;

    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  }

  @else {
    //Всегда
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
  }
}

//Адаптивное свойство до
@mixin adaptiv-value-to($property, $startSize, $minSize, $minWidth) {
  $addSize: $startSize - $minSize;

  //#{$property}: $minSize + px;
  @media (min-width: #{$minWidth + px}) {
    #{$property}: calc(#{$minSize + px} + #{$addSize} * (((100vw - #{$minWidth + px})) / ((#{$maxWidth - $minWidth}))));
  }
}